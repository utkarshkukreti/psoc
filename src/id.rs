pub fn id(str: &str) -> String {
    if BUILTINS.iter().any(|s| s == &str) || RESERVED.iter().any(|s| s == &str) {
        String::from("$$") + str
    } else {
        let mut string = String::new();
        for ch in str.chars() {
            let str = match ch {
                '0'...'9' | 'a'...'z' | 'A'...'Z' => {
                    string.push(ch);
                    continue;
                }
                '_' => "_",
                '.' => "$dot",
                '$' => "$dollar",
                '~' => "$tilde",
                '=' => "$eq",
                '<' => "$less",
                '>' => "$greater",
                '!' => "$bang",
                '#' => "$hash",
                '%' => "$percent",
                '^' => "$up",
                '&' => "$amp",
                '|' => "$bar",
                '*' => "$times",
                '/' => "$div",
                '+' => "$plus",
                '-' => "$minus",
                ':' => "$colon",
                '\\' => "$bslash",
                '?' => "$qmark",
                '@' => "$at",
                '\'' => "$prime",
                _ => {
                    string.push('$');
                    string.push_str(&(ch as u32).to_string());
                    continue;
                }
            };
            string.push_str(str);
        }
        string
    }
}

static BUILTINS: &'static [&'static str] = &[
    "arguments",
    "Array",
    "ArrayBuffer",
    "Boolean",
    "DataView",
    "Date",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "Error",
    "escape",
    "eval",
    "EvalError",
    "Float32Array",
    "Float64Array",
    "Function",
    "Infinity",
    "Int16Array",
    "Int32Array",
    "Int8Array",
    "Intl",
    "isFinite",
    "isNaN",
    "JSON",
    "Map",
    "Math",
    "NaN",
    "Number",
    "Object",
    "parseFloat",
    "parseInt",
    "Promise",
    "Proxy",
    "RangeError",
    "ReferenceError",
    "Reflect",
    "RegExp",
    "Set",
    "SIMD",
    "String",
    "Symbol",
    "SyntaxError",
    "TypeError",
    "Uint16Array",
    "Uint32Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "undefined",
    "unescape",
    "URIError",
    "WeakMap",
    "WeakSet",
];

static RESERVED: &'static [&'static str] = &[
    "break",
    "case",
    "catch",
    "class",
    "const",
    "continue",
    "debugger",
    "default",
    "delete",
    "do",
    "else",
    "export",
    "extends",
    "finally",
    "for",
    "function",
    "if",
    "import",
    "in",
    "instanceof",
    "new",
    "return",
    "super",
    "switch",
    "this",
    "throw",
    "try",
    "typeof",
    "var",
    "void",
    "while",
    "with",
    "await",
    "let",
    "static",
    "yield",
    "enum",
    "implements",
    "interface",
    "package",
    "private",
    "protected",
    "public",
    "abstract",
    "boolean",
    "byte",
    "char",
    "double",
    "final",
    "float",
    "goto",
    "int",
    "long",
    "native",
    "short",
    "synchronized",
    "throws",
    "transient",
    "volatile",
    "null",
    "true",
    "false",
];
